<!doctype html>
<html lang="en">
    <head>
        <title>Russian Declension-o-matic</title>
        <meta charset="UTF-8">
<!--
****               RUSSIAN DECLENSION-O-MATIC                ****
****      Thomas Karpiniec <tom.karpiniec@outlook.com>       ****
****  Retrieve grammar tables from Wiktionary automatically  ****

MIT Licensed
Copyright (c) 2024 by contributors:
- Thomas Karpiniec
- Rémi Slysz

Copyright (c) 2013 Ramesh Nair (Levenshtein algorithm)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Changelog:
2018-07-15  First rough version online
2018-07-17  Merge into single MIT-licensed file
            Improve visual appearance
            De-bold the root word and highlight search term in table
            Support ?q=term and #term URL shortcuts
            Cache API calls
            Ensure only a table containing term can match
            Support for back/forward navigation between searches
2018-07-18  Make the all-important pronouns table work
            Make form-of link following more flexible
2018-07-25  Use localeCompare() for case-insensitive Russian comparison
            Parse the HTML as a tree - mostly remove Zalgo
            Always prefer earlier definitions over later ones
2018-07-26  Move charset to top of document to avoid unneeded reloads
            Fix tagName wrong case - now always case-insensitive
2018-08-01  Use 25 search results for better chance of finding root word
            Update algorithm to capture multiple links and tables
2018-08-17  Favour earlier form-of links over later (мнению went to English)
2024-06-25  Fix for for the Wiktionary changing the header class name
            (Thanks to Rémi Slysz)
-->
        <style type="text/css">
            body {
                font-family: sans-serif;
            }
            .main-body {
                max-width: 60em;
                margin-left: auto;
                margin-right: auto;
                background-color: white;
            }
            #status {
                font-style: italic;
            }
            .search-bar {
                background-color: rgb(112, 149, 218);
                padding: 2em;
            }
            form {
                width: 100%;
                display: flex;
                flex-direction: row;
            }
            #submit {
                width: 150px;
                font-size: 1.5em;
            }
            #search_term {
                flex-grow: 1;
                font-size: 1.5em;
            }
            #results table {
                margin-left: auto;
                margin-right: auto;
            }
            #results td, #results th {
                padding-left: 0.7em;
                padding-right: 0.7em;
                padding-top: 0.2em;
                padding-bottom: 0.2em;
                text-align: center;
            }
            #results td {
                background-color: rgb(247, 250, 255);
            }
            #results th {
                background-color: rgb(226, 233, 255);
            }
            #results td.match {
                background-color: rgb(255, 177, 177);
            }
            #results caption {
                display: none;
            }
            span.Latn {
                font-size: 0.8em; /* transliterations */
            }
        </style>
    </head>

    <body>
    <div class="main-body">
        <h1>Russian Declension-o-matic</h1>
        <p>Enter a Russian word. This tool will try to locate the declensions or conjugations on English Wiktionary. <a href="https://github.com/thombles/declensions">Code &amp; Docs</a></p>
        <div class="search-bar">
            <form onSubmit="return doSearch()">
                <input id="search_term" type="text" placeholder="слово">
                <input id="submit" type="submit" value="Search">
            </form>
        </div>
        <p id="status">No search in progress.</p>
        <div id="results">

        </div>
    </div>

    <!-- Main application script -->
    <script type="text/javascript">
        const ST_INITIAL_SEARCH = "Searching for word: ";
        const ST_DEFINITION = "Loading definition page: ";
        const ST_DONE = "Done.";
        const ST_NOT_FOUND = "Couldn't locate a declension table for that word. :(";
        const ST_ERROR = "Sorry, an error occurred: ";
        const TITLE = "Russian Declension-o-matic";

        // Caches that will last for the lifetime of this page
        // This will neatly handle repeated lookups if the user navigates туда-сюда
        // But any issues can be fixed with a refresh
        var queryId = 0; // maintain consistency across JSONP requests. A bit ugly but it'll work.
        var searchCache = {};
        var pageCache = {};

        const hashCheck = function() {
            var initialTerm = null;
            const queryMatch = window.location.href.match(/\?q=([^#]+)/);
            // Look for ?q=слово
            if (queryMatch) {
                initialTerm = decodeURIComponent(queryMatch[1]);
            }
            // Look for #слово (preferred usage, takes priority)
            if (window.location.hash) {
                initialTerm = decodeURIComponent(window.location.hash.substr(1));
            }
            if (initialTerm) {
                document.getElementById("search_term").value = initialTerm;
                doSearch(true);
            }
        }
        window.onload = hashCheck;
        window.onhashchange = hashCheck;

        // User pressed the Search button (or URL hash changed). Kick off the process and suppress form submission.
        function doSearch(suppressHistory) {
            clearResults();
            const term = document.getElementById("search_term").value.trim();
            if (term.length == 0) {
                return false;
            }
            updateStatusText(ST_INITIAL_SEARCH + term);
            updatePageTitle(term);
            if (!suppressHistory) {
                history.pushState(null, null, `#${term}`);
            }

            // The first step is always a search
            wiktionarySearch(term).then((searchResult) => {
                // Context that tracks the ongoing state of this search and is ultimately returned to the UI
                var ctx = makeContextForSearch(term, searchResult);
                // This promise will resolve when the context has been filled with all the data we're going to get
                return spiderTables(ctx);
            }).then((ctx) => { // success (but there could be 0 tables found)
                clearResults(); // in case overlapping searches created a mess in the meantime
                ctx.tables.reverse(); // pages closer to root word come first, then weird meanings
                for (let i = 0; i < ctx.tables.length; i++) {
                    showDeclensionTable(ctx.tables[i].pageTitle, ctx.tables[i].table);
                }
                highlightSearchTerm(ctx);
                if (ctx.tables.length == 0) {
                    updateStatusText(ST_NOT_FOUND);
                } else {
                    updateStatusText(ST_DONE);
                }
            }, (ctx) => { // severe failure
                console.log("Search failed!");
                console.log(ctx);
                updateStatusText(ST_ERROR + ctx.error);
            });      
            return false;
        }

        // Request a list of search results for a term. Returns a Promise that will fulfil with the resulting JSON.
        function wiktionarySearch(term) {
            // Use the cache if possible
            if (searchCache[term]) {
                return Promise.resolve(searchCache[term]);
            }
            // Otherwise make a new API request and wrap it in a Promise
            return new Promise((fulfil, reject) => {
                // Make handlers for this specific query - global state is a little nasty but required for the <script> JSONP
                const success = `searchSuccess${++queryId}`;
                const failure = `searchFailure${++queryId}`;
                window[success] = fulfil;
                const searchUrl = `https://en.wiktionary.org/w/api.php?action=query&list=search&srsearch=${term}&srlimit=25&callback=${success}&format=json`;
                runWiktionaryApi(searchUrl, failure);
            });
        }

        // Request a Wiktionary definition page. Returns a Promise that will fulfil with the resulting JSON.
        function wiktionaryPage(title) {
            title = decodeURIComponent(title);
            if (pageCache[title]) {
                return Promise.resolve(pageCache[title]);
            }
            return new Promise((fulfil, reject) => {
                const success = `definitionSuccess${++queryId}`;
                const failure = `definitionFailure${++queryId}`;
                window[success] = fulfil;
                const pageUrl = `https://en.wiktionary.org/w/api.php?action=parse&page=${title}&format=json&callback=${success}`;
                updateStatusText(ST_DEFINITION + " " + title);
                runWiktionaryApi(pageUrl, failure);
            });
        }

        // Create a <script> tag to submit a query to the Wiktionary API. It's a bit crusty but sidesteps cross-origin issues.
        // url: Absolute query URL
        // failure: Name of global function to call onerror
        // Useful reference: https://www.mediawiki.org/wiki/API:Cross-site_requests
        function runWiktionaryApi(url, failure) {
            var script = document.createElement("script");
            script.src = url;
            script.onerror = `${failure}();`;
            document.head.appendChild(script);
        }

        // Parse the JSON results of the initial Wiktionary search and return a new ctx object
        function makeContextForSearch(term, json) {
            var ctx = {
                searchTerm: term,           // what the user originally typed
                definitionsToCheck: [],     // titles of pages we should look up to check for matching tables
                definitionsCompleted: [],   // titles of pages we have already looked up this search
                tables: []                  // array of { pageTitle: "словам", table: "html" }
            };
            
            if (!json.query || !json.query.search ) {
                ctx.error = "Search query returned unexpected format";
                return ctx;
            }

            // The result seems good so cache it
            searchCache[term] = json;

            // Filter out any results that have spaces in them. Multi-word phrases can mess up our results.
            const results = json.query.search.filter(function(r) {
                return r.title.indexOf(" ") == -1;
            });
            if (results.length == 0) {
                ctx.error = "No suitable search results found";
                return ctx;
            }

            // Out of the remaining search results, which title matches our search term most closely?
            // Root words are usually pretty similar to their declensions. Anecdotally this works really well.
            var bestResult = 0;
            var bestDistance = 1000;
            for (let i = 0; i < results.length; i++) {
                const possibleTitle = results[i].title;
                const distance = Levenshtein.get(term, possibleTitle);
                if (distance < bestDistance) {
                    bestResult = i;
                    bestDistance = distance;
                }
            }

            // Use the top result out of whatever are left
            const title = results[bestResult].title;
            addTitleToContext(ctx, title);
            return ctx;
        }

        // Request unchecked definition pages and process them until we run out of relevant links to follow (usually after 2-3 pages)
        // or we've made too many requests (haven't seen it happen but a watchdog is good)
        // Returns a Promise which fulfils with the completed context
        function spiderTables(ctx) {
            const DEFN_REQUEST_LIMIT = 10;
            if (ctx.definitionsToCheck.length == 0 || ctx.definitionsCompleted.length >= DEFN_REQUEST_LIMIT) {
                return Promise.resolve(ctx);
            }
            const nextTitle = ctx.definitionsToCheck.pop();
            ctx.definitionsCompleted.push(nextTitle);
            return wiktionaryPage(nextTitle).then((json) => {
                updateContextWithPage(ctx, json);
                // Recursively continue requests (and chain promises) until we reach one of the terminal conditions above
                return spiderTables(ctx);
            });
        }

        // We have the content of a definition page
        // This _might_ contain a table we want directly
        // It might be a short linker page "1. genitive singular of сло́во" and we need to follow that link
        // Identify both of these types of things and store them in the context
        function updateContextWithPage(ctx, json) {
            if (!json || !json.parse || !json.parse.text) {
                return;
            }

            const text = json.parse.text["*"];
            const title = json.parse.title;
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, "text/html");
            if (!doc) {
                ctx.error = "Could not parse returned HTML";
            }

            // We have a seemingly valid result so let's cache it
            pageCache[title] = json;
            
            // Find the "Russian" <h2>
            const headlines = doc.getElementsByClassName("mw-heading");
            var currentElement = null;
            for (let i = 0; i < headlines.length; i++) {
                if (headlines[i].firstElementChild.innerHTML == "Russian") {
                    currentElement = headlines[i];
                }
            }
            if (!currentElement || safeToUpper(currentElement.firstElementChild.tagName) != "H2") {
                ctx.error = "Could not find initial <h2>";
                return;
            }
            
            // Walk along all its siblings and their children until we find another <h2> (next language after Russian) or run out of siblings
            while (true) {
                currentElement = currentElement.nextElementSibling;
                if (!currentElement || safeToUpper(currentElement.tagName) == "H2") {
                    break;
                }
                recursiveSearch(currentElement, (el) => {
                    checkFormOfLinkType1(ctx, el);
                    checkFormOfLinkType2(ctx, el);
                    checkInflectionTable(ctx, title, el);
                });
            }
        }

        // Walk the graph depth first and perform `task` on each node. No stop condition.
        function recursiveSearch(top, task) {
            task(top);
            for (let i = 0; i < top.childNodes.length; i++) {
                recursiveSearch(top.childNodes[i], task);
            }
        }

        // <span class="form-of-definition-link">
        // e.g. словам
        function checkFormOfLinkType1(ctx, el) {;
            if (safeToUpper(el.tagName) == "SPAN" && el.classList.contains("form-of-definition-link")) {
                // The <a> should be inside somewhere
                var titleToFollow = null;
                recursiveSearch(el, (el) => {
                    if (safeToUpper(el.tagName) == "A") {
                        const match = el.href.match(/\/wiki\/([^#]+)/);
                        if (match && !titleToFollow) { // take first link, not last
                            titleToFollow = decodeURIComponent(match[1]);
                        }
                    }
                });
                if (titleToFollow) {
                    addTitleToContext(ctx, titleToFollow);
                }
            }
        }

        // form of.*?<span class="Cyrl" lang="ru"
        // e.g. всё
        function checkFormOfLinkType2(ctx, el) {
            if (!el.innerText) return;
            const needle = "form of";
            const haystack = el.innerText.trim();
            const index = haystack.indexOf(needle);
            if ((index != -1) && (index == haystack.length - needle.length) && el.nextElementSibling) { // i.e. endsWith()
                // Try to find an <a> in the next sibling
                var titleToFollow = null;
                recursiveSearch(el.nextElementSibling, (el) => {
                    if (safeToUpper(el.tagName) == "A") {
                        const match = el.href.match(/\/wiki\/([^#]+)/);
                        if (match) {
                            titleToFollow = decodeURIComponent(match[1]);
                        }
                    }
                });
                if (titleToFollow) {
                    addTitleToContext(ctx, titleToFollow);
                }
            }
        }

        // <table class="inflection-table">
        // e.g. слово
        function checkInflectionTable(ctx, title, el) {
            // Happily all the declension/conjugation tables seem to have the class "inflection-table"
            // If we find such a table and it contains a span matching our search term, display this table
            // More relevant ones seem to be higher in the wiktionary article so rely on that for now
            if (safeToUpper(el.tagName) == "TABLE" && el.classList.contains("inflection-table")) {
                var tableMatchesSearch = false;
                recursiveSearch(el, (el) => {
                    if (safeToUpper(el.tagName) == "SPAN" && compareRussian(el.innerText, ctx.searchTerm)) {
                        tableMatchesSearch = true;
                    }
                });
                if (tableMatchesSearch) {
                    // Try to hide tables that are titled as being "pre-reform" or "pre-1918" Russian
                    const wrapperText = el.parentElement.parentElement.outerHTML;
                    if (wrapperText.toUpperCase().indexOf("PRE-") == -1) {
                        ctx.tables.push({ pageTitle: title, table: el.outerHTML });
                    }
                }
            }
        }

        // Enqueue a title in a context, first checking that we haven't already queued it or completed it
        function addTitleToContext(ctx, title) {
            if (ctx.definitionsCompleted.indexOf(title) == -1 && ctx.definitionsToCheck.indexOf(title) == -1) {
                ctx.definitionsToCheck.push(title);
            }
        }

        // We found the declensions table we're looking for. Take the HTML and show it to the user.
        function showDeclensionTable(title, html) {
            html = cleanUpRawTable(html);

            // Put it on the page
            const r = document.getElementById("results");
            r.innerHTML += `<p>Wiktionary page: <b><a href="https://en.wiktionary.org/wiki/${title}#Russian">${title}</a></b></p>\n`;
            r.innerHTML += html;
        }
        
        // Eliminate symbols and links and things that we don't want from the retrieved table
        // Minor Zalgo here but honestly this would be super fiddly using the DOM
        function cleanUpRawTable(html) {
            // Strip all links
            html = html.replace(/<a[^>]*>/g, "");
            html = html.replace(/<\/a[^>]*>/g, "");
            // Strip marker symbols
            html = html.replace(/△/g, "");
            // Remove the strong elements marking the root word
            html = html.replace(/<strong[^>]*>/g, "");
            html = html.replace(/<\/strong[^>]*>/g, "");
            // Replace the min-width specification on the table with centering
            html = html.replace(/width:100%/g, "");
            html = html.replace(/min-width:\d+em/g, "");
            // Eliminate background colours so we can make them consistent with CSS
            html = html.replace(/background:[^";]+/g, "");
            html = html.replace(/background-color:[^";]+/g, "");
            return html;
        }

        // Try to find and highlight the term we searched for
        function highlightSearchTerm(ctx) {
            const ruSpans = document.getElementsByClassName("Cyrl");
            const term = ctx.searchTerm;
            for (let i = 0; i < ruSpans.length; i++) {
                const s = ruSpans[i];
                if (compareRussian(s.innerText, term)) {
                    s.parentElement.classList.add("match");
                }
            }
        }

        // Return true if the two words are the same
        // - trim and case-insensitive
        // - ignore accents on letters e.g. каза́лось
        // - insensitive to ё vs е
        function compareRussian(word1, word2) {
            word1 = word1.trim();
            word2 = word2.trim();
            return word1.localeCompare(word2, "ru", {"sensitivity": "base"}) == 0;
        }

        function updateStatusText(text) {
            document.getElementById("status").innerText = text;
        }

        function updatePageTitle(text) {
            document.title = `${text} - ${TITLE}`;
        }

        function clearResults() {
            document.getElementById("results").innerHTML = "";
        }

        function safeToUpper(text) {
            if (text != null && text.toUpperCase) {
                return text.toUpperCase();
            }
            return text;
        }
    </script>

    <!-- Fast Levenshtein by Ramesh Nair, included under MIT licence: https://github.com/hiddentao/fast-levenshtein/ -->
    <script type="text/javascript">
        (function() {
            'use strict';
            
            var collator;
            try {
            collator = (typeof Intl !== "undefined" && typeof Intl.Collator !== "undefined") ? Intl.Collator("generic", { sensitivity: "base" }) : null;
            } catch (err){
            console.log("Collator could not be initialized and wouldn't be used");
            }
            // arrays to re-use
            var prevRow = [],
            str2Char = [];
            
            /**
             * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.
             */
            var Levenshtein = {
            /**
             * Calculate levenshtein distance of the two strings.
             *
             * @param str1 String the first string.
             * @param str2 String the second string.
             * @param [options] Additional options.
             * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.
             * @return Integer the levenshtein distance (0 and above).
             */
            get: function(str1, str2, options) {
                var useCollator = (options && collator && options.useCollator);
                
                var str1Len = str1.length,
                str2Len = str2.length;
                
                // base cases
                if (str1Len === 0) return str2Len;
                if (str2Len === 0) return str1Len;
        
                // two rows
                var curCol, nextCol, i, j, tmp;
        
                // initialise previous row
                for (i=0; i<str2Len; ++i) {
                prevRow[i] = i;
                str2Char[i] = str2.charCodeAt(i);
                }
                prevRow[str2Len] = str2Len;
        
                var strCmp;
                if (useCollator) {
                // calculate current row distance from previous row using collator
                for (i = 0; i < str1Len; ++i) {
                    nextCol = i + 1;
        
                    for (j = 0; j < str2Len; ++j) {
                    curCol = nextCol;
        
                    // substution
                    strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));
        
                    nextCol = prevRow[j] + (strCmp ? 0 : 1);
        
                    // insertion
                    tmp = curCol + 1;
                    if (nextCol > tmp) {
                        nextCol = tmp;
                    }
                    // deletion
                    tmp = prevRow[j + 1] + 1;
                    if (nextCol > tmp) {
                        nextCol = tmp;
                    }
        
                    // copy current col value into previous (in preparation for next iteration)
                    prevRow[j] = curCol;
                    }
        
                    // copy last col value into previous (in preparation for next iteration)
                    prevRow[j] = nextCol;
                }
                }
                else {
                // calculate current row distance from previous row without collator
                for (i = 0; i < str1Len; ++i) {
                    nextCol = i + 1;
        
                    for (j = 0; j < str2Len; ++j) {
                    curCol = nextCol;
        
                    // substution
                    strCmp = str1.charCodeAt(i) === str2Char[j];
        
                    nextCol = prevRow[j] + (strCmp ? 0 : 1);
        
                    // insertion
                    tmp = curCol + 1;
                    if (nextCol > tmp) {
                        nextCol = tmp;
                    }
                    // deletion
                    tmp = prevRow[j + 1] + 1;
                    if (nextCol > tmp) {
                        nextCol = tmp;
                    }
        
                    // copy current col value into previous (in preparation for next iteration)
                    prevRow[j] = curCol;
                    }
        
                    // copy last col value into previous (in preparation for next iteration)
                    prevRow[j] = nextCol;
                }
                }
                return nextCol;
            }
            };
            window.Levenshtein = Levenshtein;
        }());
    </script>

    </body>
</html>
